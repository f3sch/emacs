#+TITLE: Felix Schlepper's Emacs

* Early-Init
This file is loaded before the package system and GUI is initialized.
A detailed description is [[elisp:(info "(emacs) Early Init File")][here]].

** Small Startup Optimizations
This avoids garabage collection during startup.
Afterward, sensible defaults are renabled.
#+begin_src emacs-lisp :tangle early-init.el
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil
	message-log-max 16384
	gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6)
  (add-hook 'after-init-hook (lambda ()
			       (setq file-name-handler-alist file-name-handler-alist-old
				     gc-cons-threshold (* 16 1024 1024)
				     gc-cons-percentage 0.1)
			       (garbage-collect))
	    t)
#+end_src

** Native Compilation
Asynchronous compilation and speed, enabled.
#+begin_src emacs-lisp :tangle early-init.el
  (let ((path (expand-file-name "eln-cache/" user-emacs-directory)))
    (setq native-comp-eln-load-path (list path)
	  native-compile-target-directory path))
  (setq native-comp-async-report-warnings-errors nil ;; Silence compiler warnings as they can be pretty disruptive
	native-compile-prune-cache t
	native-comp-speed 2
	native-comp-deferred-compilation         nil)  ;; Make native compilation happens asynchronously

  (setq load-prefer-newer noninteractive)
#+end_src

** Unstyled Emacs
Maximize Frame and do not show unstyled Emacs.
#+begin_src emacs-lisp :tangle early-init.el
  (setq-default frame-inhibit-implied-resize t)
  ;; HACK: Don't show size info (or anything else) in frame title
  (setq-default frame-title-format "\n")
  ;; Disable start-up screen
  (setq-default inhibit-startup-screen t)
  (setq-default inhibit-startup-message t)

  ;; UnsetSRF
  (setq site-run-file nil)
  ;; -UnsetSRF

  ;; Maximize the Emacs frame on startup
  (push '(fullscreen . maximized) initial-frame-alist)
  (push '(fullscreen . maximized) default-frame-alist)

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  ;; Disable tool and scrollbars. These are just clutter (the scrollbar also
  ;; impacts performance).
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (customize-set-variable 'tool-bar-mode nil)
  (customize-set-variable 'scroll-bar-mode nil)
#+end_src

** Scratch Buffer
Set the scratch buffer initial mode.
This pulls in a whole lot of packages, but I do not care about the startup time.
#+begin_src emacs-lisp :tangle early-init.el
  ;; Fundamental mode at startup.
  (setq initial-major-mode 'emacs-lisp-mode)
#+end_src

** Package.el
Required by straight.el.
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src

* Startup
** Load Time
#+begin_src emacs-lisp
    (defconst emacs-start-time (current-time))
    (defun report-time-since-load (&optional suffix)
      (message "Loading init...done (%.3fs)%s"
	       (float-time (time-subtract (current-time) emacs-start-time))
	       suffix))

    (add-hook 'after-init-hook
	      #'(lambda () (report-time-since-load " [after-init]"))
	      t)


    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
    (setq straight-use-package-by-default t)

      ;;; Paths
    (setq package-user-dir (expand-file-name "packages" user-emacs-directory)
	  url-history-file (expand-file-name "url/history" user-emacs-directory)
	  custom-file (expand-file-name "custom.el" user-emacs-directory))


    (use-package diminish)


    (use-package apheleia
      :diminish
      :straight
      (apheleia :type git :host github :repo "radian-software/apheleia")
      :hook prog-mode
      :init
      (apheleia-global-mode +1))

    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
      (setq evil-want-keybinding nil)
      :config
      (evil-mode 1))

    (use-package evil-collection
      :after evil
      :ensure t
      :config
      (evil-collection-init))

    (use-package magit
       :custom
       (transient-default-level 7))
#+end_src
